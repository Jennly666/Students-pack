#include <iostream>
#include <vector>
#include <string>

class Student {
public:
    Student(std::string name) : name(name) {}

    const std::string& getName() const {
        return name;
    }

    void addGrade(int grade) {
        grades.push_back(grade);
    }

    bool isExcellentStudent() const {
        return calculateAverageGrade() >= 4.5;
    }

private:
    double calculateAverageGrade() const {
        if (grades.empty()) {
            return 0.0;
        }

        double sum = 0.0;
        for (int grade : grades) {
            sum += grade;
        }

        return sum / grades.size();
    }

private:
    std::string name;
    std::vector<int> grades;
};

class Teacher {
public:
    Teacher(std::string name) : name(name) {}

    const std::string& getName() const {
        return name;
    }

    bool getMood() const {
        return goodMood;
    }

    virtual void addGradeRandomly(Student& student) {
        int adjustedGrade = calculateAdjustedGrade(student.isExcellentStudent());
        student.addGrade(adjustedGrade);
        gradeCount++;

        std::cout << "Преподаватель " << name << " поставил оценку " << adjustedGrade
            << " студенту " << student.getName() << " с " << (goodMood ? "хорошим" : "плохим") << " настроением" << std::endl;

        if (gradeCount % 5 == 0) {
            changeMoodRandomly();
            std::cout << "Настроение преподавателя " << name << " изменилось: "
                << (goodMood ? "Хорошее" : "Плохое") << std::endl;
        }
    }

    void addGrade(Student& student, int grade) {
        student.addGrade(grade);
        std::cout << "Преподаватель " << name << " поставил оценку " << grade
            << " студенту " << student.getName() << std::endl;
    }
protected:
    int calculateAdjustedGrade(bool isExcellentStudent) const {
        if (goodMood) {
            return (isExcellentStudent) ? 5 : (rand() % 2 + 4);
        }
        else {
            return (isExcellentStudent) ? (rand() % 2 + 4) : (rand() % 2 + 2);
        }
    }
    void changeMoodRandomly() {
        goodMood = (rand() % 2 == 0); // Равновероятное хорошее или плохое настроение
    }
    bool goodMood = (rand() % 2 == 0); // Равновероятное хорошее или плохое настроение
    std::string name;
    int gradeCount;
};

class RandomlyTeacher : public Teacher {
public:
    RandomlyTeacher(std::string name) : Teacher(name) {}
    void addGrade(Student& student) {
        student.addGrade(grade);
        gradeCount++;

        std::cout << "Преподаватель " << this->getName() << " поставил оценку " << grade
            << " студенту " << student.getName() << std::endl;

        if (gradeCount % randomNumberMood == 0) {
            changeMoodRandomly();
            std::cout << "Настроение преподавателя " << name << " изменилось: "
                << (goodMood ? "Хорошее" : "Плохое") << std::endl;
        }
    }

    void addGradeRandomly(Student& student) override {
        addGrade(student);
    }
private:
    int randomNumberMood = rand() % 3 + 3;
    int grade = (rand() % 4 + 2);
};


class Lesson {
public:
    Lesson(std::string name) : name(name) {}

    const std::string& getName() const {
        return name;
    }
    void addTeacher(Teacher& teacher) {
        teachers.push_back(&teacher);
    }

    void addStudent(Student& student) {
        students.push_back(&student);
    }

    void conductLesson() {
        std::cout << "Преподаватели: ";
        for (Teacher* teacher : teachers) {
            std::cout << teacher->getName() << " ";
        }
        std::cout << "провели занятие студентам: ";
        for (Student* student : students) {
            std::cout << student->getName() << " ";
        }
        std::cout << std::endl << "Результаты занятия " << this->getName() << ":" << std::endl;
        std::cout << "//////////" << std::endl;
        for (Teacher* teacher : teachers) {
            for (Student* student : students) {
                if (rand() % 2 == 0) {
                    if (teacher->getMood()) {
                        // В хорошем настроении случайное количество раз от 1 до 5
                        int numGrades = rand() % 5 + 1;
                        for (int i = 0; i < numGrades; ++i) {
                            teacher->addGradeRandomly(*student);
                        }
                    }
                    else {
                        // В плохом настроении случайное количество раз от 1 до 3
                        int numGrades = rand() % 3 + 1;
                        for (int i = 0; i < numGrades; ++i) {
                            teacher->addGradeRandomly(*student);
                        }
                    }
                }
            }
        }
        std::cout << "//////////" << std::endl;
    }

private:
    std::string name;
    std::string subject;
    std::vector<Teacher*> teachers;
    std::vector<Student*> students;
};

int main() {
    std::srand(std::time(0));
    setlocale(LC_ALL, "Russian");

    Student student1("Иванов");
    Student student2("Петров");

    student1.addGrade(5);
    student2.addGrade(5);

    Teacher teacher1("Сидоров");
    Teacher teacher2("Синевов");

    teacher1.addGrade(student1, 5);
    teacher2.addGrade(student2, 3);

    std::cout << "______________" << std::endl;

    teacher1.addGradeRandomly(student1);
    teacher2.addGradeRandomly(student2);
    teacher2.addGradeRandomly(student2);
    teacher2.addGradeRandomly(student2);
    teacher2.addGradeRandomly(student2);
    teacher2.addGradeRandomly(student2);
    teacher2.addGradeRandomly(student2);

    std::cout << "______________" << std::endl;

    RandomlyTeacher randomlyTeacher1("Черпаков"); // Класс не обязательно ставит только 5, просто ставит всегда какую-то определенную оценку.
    randomlyTeacher1.addGrade(student1);
    randomlyTeacher1.addGrade(student1);
    randomlyTeacher1.addGrade(student2);
    randomlyTeacher1.addGrade(student2);
    randomlyTeacher1.addGrade(student2);
    randomlyTeacher1.addGrade(student2);

    std::cout << "______________" << std::endl;

    Lesson lesson1("Математика");
    lesson1.addTeacher(teacher1);
    lesson1.addTeacher(randomlyTeacher1);
    lesson1.addStudent(student1);
    lesson1.addStudent(student2);
    lesson1.conductLesson();

    std::cout << student1.getName() << " отличник: " << (student1.isExcellentStudent() ? "Да" : "Нет") << std::endl;
    std::cout << student2.getName() << " отличник: " << (student2.isExcellentStudent() ? "Да" : "Нет") << std::endl;
    return 0;
}
