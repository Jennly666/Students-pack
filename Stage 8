#include <iostream>
#include <vector>
#include <string>

class Student {
public:
    Student(std::string name) : name(name) {}

    const std::string& getName() const {
        return name;
    }

    void addGrade(int grade) {
        grades.push_back(grade);
    }

    bool isExcellentStudent() const {
        return calculateAverageGrade() >= 4.5;
    }

private:
    double calculateAverageGrade() const {
        if (grades.empty()) {
            return 0.0;
        }

        double sum = 0.0;
        for (int grade : grades) {
            sum += grade;
        }

        return sum / grades.size();
    }

private:
    std::string name;
    std::vector<int> grades;
};

class Teacher {
public:
    Teacher(std::string name) : name(name) {}

    const std::string& getName() const {
        return name;
    }

    bool getMood() const {
        return goodMood;
    }

    virtual void addGradeRandomly(Student& student) {
        int adjustedGrade = calculateAdjustedGrade(student.isExcellentStudent());
        student.addGrade(adjustedGrade);
        gradeCount++;

        std::cout << "Преподаватель " << name << " поставил оценку " << adjustedGrade
            << " студенту " << student.getName() << " с " << (goodMood ? "хорошим" : "плохим") << " настроением" << std::endl;

        if (gradeCount % 5 == 0) {
            changeMoodRandomly();
            std::cout << "Настроение преподавателя " << name << " изменилось: "
                << (goodMood ? "Хорошее" : "Плохое") << std::endl;
        }
    }

    void addGrade(Student& student, int grade) {
        student.addGrade(grade);
        std::cout << "Преподаватель " << name << " поставил оценку " << grade
            << " студенту " << student.getName() << std::endl;
    }
protected:
    int calculateAdjustedGrade(bool isExcellentStudent) const {
        if (goodMood) {
            return (isExcellentStudent) ? 5 : (rand() % 2 + 4);
        }
        else {
            return (isExcellentStudent) ? (rand() % 2 + 4) : (rand() % 2 + 2);
        }
    }
    void changeMoodRandomly() {
        goodMood = (rand() % 2 == 0); // Равновероятное хорошее или плохое настроение
    }
    bool goodMood = (rand() % 2 == 0); // Равновероятное хорошее или плохое настроение
    std::string name;
    int gradeCount;
};

class RandomlyTeacher : public Teacher {
public:
    RandomlyTeacher(std::string name) : Teacher(name) {}
    void addGrade(Student& student) {
        student.addGrade(grade);
        gradeCount++;

        std::cout << "Преподаватель " << this->getName() << " поставил оценку " << grade
            << " студенту " << student.getName() << std::endl;

        if (gradeCount % randomNumberMood == 0) {
            changeMoodRandomly();
            std::cout << "Настроение преподавателя " << name << " изменилось: "
                << (goodMood ? "Хорошее" : "Плохое") << std::endl;
        }
    }

    void addGradeRandomly(Student& student) override {
        addGrade(student);
    }
private:
    int randomNumberMood = rand() % 3 + 3;
    int grade = (rand() % 4 + 2);
};


class Lesson {
public:
    Lesson(std::string name) : name(name) {}

    const std::string& getName() const {
        return name;
    }
    void addTeacher(Teacher& teacher) {
        teachers.push_back(&teacher);
    }

    void addStudent(Student& student) {
        students.push_back(&student);
    }

    bool hasTeacher(const Teacher& teacher) const {
        return std::find(teachers.begin(), teachers.end(), &teacher) != teachers.end();
    }

    const std::vector<Student*>& getStudents() const {
        return students;
    }

    void conductLesson() {
        std::cout << "Преподаватели: ";
        for (Teacher* teacher : teachers) {
            std::cout << teacher->getName() << " ";
        }
        std::cout << "провели занятие студентам: ";
        for (Student* student : students) {
            std::cout << student->getName() << " ";
        }
        std::cout << std::endl << "Результаты занятия " << this->getName() << ":" << std::endl;
        std::cout << "//////////" << std::endl;
        for (Teacher* teacher : teachers) {
            for (Student* student : students) {
                if (rand() % 2 == 0) {
                    if (teacher->getMood()) {
                        // В хорошем настроении случайное количество раз от 1 до 5
                        int numGrades = rand() % 5 + 1;
                        for (int i = 0; i < numGrades; ++i) {
                            teacher->addGradeRandomly(*student);
                        }
                    }
                    else {
                        // В плохом настроении случайное количество раз от 1 до 3
                        int numGrades = rand() % 3 + 1;
                        for (int i = 0; i < numGrades; ++i) {
                            teacher->addGradeRandomly(*student);
                        }
                    }
                }
            }
        }
        std::cout << "//////////" << std::endl;
    }
private:
    std::string name;
    std::vector<Teacher*> teachers;
    std::vector<Student*> students;
};

class Parent {
public:
    Parent(std::string name) : name(name) {}

    const std::string& getName() const {
        return name;
    }

    void addChild(Student& student) {
        children.push_back(&student);
    }

    bool hasChild(const Student& student) const {
        return std::find(children.begin(), children.end(), &student) != children.end();
    }

    void tellAboutAllChildren() const {
        std::cout << "Рассказ о всех детях:" << std::endl;
        for (const Student* student : children) {
            tellAboutChild(student);
        }
        std::cout << std::endl;
    }

    void tellAboutOneRandomChild() const {
        if (children.empty()) {
            std::cout << "Нет детей для рассказа." << std::endl;
            return;
        }

        int randomIndex = rand() % children.size();
        tellAboutChild(children[randomIndex]);
        std::cout << std::endl;
    }

    void tellAboutAverageChildren() const {
        if (children.empty()) {
            std::cout << "Нет детей для рассказа." << std::endl;
            return;
        }

        double averageGrade = calculateAverageGrade();
        std::cout << "Рассказ о средней успеваемости детей: " << (averageGrade >= 4.5 ? "Хорошая" : "Плохая") << std::endl;
        std::cout << std::endl;
    }

    void tellAboutSpecificChild(const Student* student) const {
        auto it = std::find(children.begin(), children.end(), student);
        if (it != children.end()) {
            tellAboutChild(*it);
        }
        else {
            std::cout << "Ошибка: Этот студент не является ребенком родителя." << std::endl;
        }
    }

private:
    void tellAboutChild(const Student* student) const {
        std::cout << "Родитель " << name << " рассказывает о ребенке " << student->getName() << ": ";
        if (goodMood) {
            std::cout << (student->isExcellentStudent() ? "Отличник" : "Не отличник") << std::endl;
        }
        else {
            std::cout << "У него всегда что-то не так." << std::endl;
        }
    }

    double calculateAverageGrade() const {
        double sum = 0.0;
        for (const Student* student : children) {
            sum += (student->isExcellentStudent() ? 5.0 : 3.0);
        }

        return sum / children.size();
    }

    std::string name;
    bool goodMood = (rand() % 2 == 0);
    std::vector<const Student*> children;
};

class Meeting {
public:
    Meeting(const std::string& name) : name(name) {}

    void addParticipant(Teacher& teacher) {
        teachers.push_back(&teacher);
    }

    void addParticipant(Parent& parent) {
        parents.push_back(&parent);
    }

    void discussLessons() {
        std::cout << "Начало обсуждения на собрании: " << name << std::endl;

        for (Lesson& lesson : lessons) {
            std::cout << "Обсуждение занятия: " << lesson.getName() << std::endl;

            for (Teacher* teacher : teachers) {
                if (lesson.hasTeacher(*teacher)) {
                    for (Student* student : lesson.getStudents()) {
                        Parent* parent = findParentOfStudent(*student);
                        if (parent) {
                            parent->tellAboutSpecificChild(student);
                        }
                        else {
                            // Формируем список детей, чьи родители отсутствуют на собрании
                            childrenWithoutParents.push_back(student);
                        }
                    }
                }
            }
        }

        // Оглашение списка детей, чьи родители отсутствуют на собрании
        if (!childrenWithoutParents.empty()) {
            std::cout << "Дети, чьи родители отсутствуют на собрании:" << std::endl;
            for (const Student* student : childrenWithoutParents) {
                std::cout << student->getName() << std::endl;
            }
        }

        std::cout << "Завершение собрания: " << name << std::endl;
    }

    void addLesson(const Lesson& lesson) {
        lessons.push_back(lesson);
    }

private:
    Parent* findParentOfStudent(const Student& student) {
        for (Parent* parent : parents) {
            if (parent->hasChild(student)) {
                return parent;
            }
        }
        return nullptr;
    }

    std::string name;
    std::vector<Teacher*> teachers;
    std::vector<Parent*> parents;
    std::vector<Lesson> lessons;
    std::vector<const Student*> childrenWithoutParents;
};

int main() {
    std::srand(std::time(0));
    setlocale(LC_ALL, "Russian");

    Teacher teacher1("Сидоров");
    Teacher teacher2("Синевов");
    Parent parent1("Анна");
    Parent parent2("Игорь");
    Student student1("Иванов");
    Student student2("Петров");
    Student student3("Сидоров");

    parent1.addChild(student1);
    parent2.addChild(student2);


    Lesson lesson1("Математика");
    lesson1.addTeacher(teacher1);
    lesson1.addTeacher(teacher2);
    lesson1.addStudent(student1);
    lesson1.addStudent(student2);
    lesson1.conductLesson();
    
    Lesson lesson2("Физика");
    lesson2.addTeacher(teacher2);
    lesson2.addStudent(student3);
    lesson2.conductLesson();

    Meeting meeting("Родительское собрание");
    //meeting.addParticipant(teacher1);
    meeting.addParticipant(teacher2);
    meeting.addParticipant(parent1);
    meeting.addParticipant(parent2);
    meeting.addLesson(lesson1);
    meeting.addLesson(lesson2);

    meeting.discussLessons();

    return 0;
}
